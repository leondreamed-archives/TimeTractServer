module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateGroup {
  count: Int!
}

type AggregateRescueTimeData {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Group {
  id: ID!
  name: String!
  blurb: String!
  description: String!
  leader: User!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  name: String!
  blurb: String
  description: String
  leader: UserCreateOneInput!
  members: UserCreateManyWithoutGroupsInput
}

input GroupCreateManyWithoutMembersInput {
  create: [GroupCreateWithoutMembersInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateWithoutMembersInput {
  id: ID
  name: String!
  blurb: String
  description: String
  leader: UserCreateOneInput!
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  blurb_ASC
  blurb_DESC
  description_ASC
  description_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
  blurb: String!
  description: String!
}

input GroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  blurb: String
  blurb_not: String
  blurb_in: [String!]
  blurb_not_in: [String!]
  blurb_lt: String
  blurb_lte: String
  blurb_gt: String
  blurb_gte: String
  blurb_contains: String
  blurb_not_contains: String
  blurb_starts_with: String
  blurb_not_starts_with: String
  blurb_ends_with: String
  blurb_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateInput {
  name: String
  blurb: String
  description: String
  leader: UserUpdateOneRequiredInput
  members: UserUpdateManyWithoutGroupsInput
}

input GroupUpdateManyDataInput {
  name: String
  blurb: String
  description: String
}

input GroupUpdateManyMutationInput {
  name: String
  blurb: String
  description: String
}

input GroupUpdateManyWithoutMembersInput {
  create: [GroupCreateWithoutMembersInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateWithoutMembersDataInput {
  name: String
  blurb: String
  description: String
  leader: UserUpdateOneRequiredInput
}

input GroupUpdateWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutMembersDataInput!
}

input GroupUpsertWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutMembersDataInput!
  create: GroupCreateWithoutMembersInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  blurb: String
  blurb_not: String
  blurb_in: [String!]
  blurb_not_in: [String!]
  blurb_lt: String
  blurb_lte: String
  blurb_gt: String
  blurb_gte: String
  blurb_contains: String
  blurb_not_contains: String
  blurb_starts_with: String
  blurb_not_starts_with: String
  blurb_ends_with: String
  blurb_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  leader: UserWhereInput
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createRescueTimeData(data: RescueTimeDataCreateInput!): RescueTimeData!
  updateRescueTimeData(data: RescueTimeDataUpdateInput!, where: RescueTimeDataWhereUniqueInput!): RescueTimeData
  updateManyRescueTimeDatas(data: RescueTimeDataUpdateManyMutationInput!, where: RescueTimeDataWhereInput): BatchPayload!
  upsertRescueTimeData(where: RescueTimeDataWhereUniqueInput!, create: RescueTimeDataCreateInput!, update: RescueTimeDataUpdateInput!): RescueTimeData!
  deleteRescueTimeData(where: RescueTimeDataWhereUniqueInput!): RescueTimeData
  deleteManyRescueTimeDatas(where: RescueTimeDataWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  rescueTimeData(where: RescueTimeDataWhereUniqueInput!): RescueTimeData
  rescueTimeDatas(where: RescueTimeDataWhereInput, orderBy: RescueTimeDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RescueTimeData]!
  rescueTimeDatasConnection(where: RescueTimeDataWhereInput, orderBy: RescueTimeDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RescueTimeDataConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type RescueTimeData {
  id: ID!
  productiveTime: Int
  distractingTime: Int
  updatedAt: DateTime!
  createdAt: DateTime!
}

type RescueTimeDataConnection {
  pageInfo: PageInfo!
  edges: [RescueTimeDataEdge]!
  aggregate: AggregateRescueTimeData!
}

input RescueTimeDataCreateInput {
  id: ID
  productiveTime: Int
  distractingTime: Int
}

input RescueTimeDataCreateOneInput {
  create: RescueTimeDataCreateInput
  connect: RescueTimeDataWhereUniqueInput
}

type RescueTimeDataEdge {
  node: RescueTimeData!
  cursor: String!
}

enum RescueTimeDataOrderByInput {
  id_ASC
  id_DESC
  productiveTime_ASC
  productiveTime_DESC
  distractingTime_ASC
  distractingTime_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RescueTimeDataPreviousValues {
  id: ID!
  productiveTime: Int
  distractingTime: Int
  updatedAt: DateTime!
  createdAt: DateTime!
}

type RescueTimeDataSubscriptionPayload {
  mutation: MutationType!
  node: RescueTimeData
  updatedFields: [String!]
  previousValues: RescueTimeDataPreviousValues
}

input RescueTimeDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RescueTimeDataWhereInput
  AND: [RescueTimeDataSubscriptionWhereInput!]
  OR: [RescueTimeDataSubscriptionWhereInput!]
  NOT: [RescueTimeDataSubscriptionWhereInput!]
}

input RescueTimeDataUpdateDataInput {
  productiveTime: Int
  distractingTime: Int
}

input RescueTimeDataUpdateInput {
  productiveTime: Int
  distractingTime: Int
}

input RescueTimeDataUpdateManyMutationInput {
  productiveTime: Int
  distractingTime: Int
}

input RescueTimeDataUpdateOneInput {
  create: RescueTimeDataCreateInput
  update: RescueTimeDataUpdateDataInput
  upsert: RescueTimeDataUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: RescueTimeDataWhereUniqueInput
}

input RescueTimeDataUpsertNestedInput {
  update: RescueTimeDataUpdateDataInput!
  create: RescueTimeDataCreateInput!
}

input RescueTimeDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  productiveTime: Int
  productiveTime_not: Int
  productiveTime_in: [Int!]
  productiveTime_not_in: [Int!]
  productiveTime_lt: Int
  productiveTime_lte: Int
  productiveTime_gt: Int
  productiveTime_gte: Int
  distractingTime: Int
  distractingTime_not: Int
  distractingTime_in: [Int!]
  distractingTime_not_in: [Int!]
  distractingTime_lt: Int
  distractingTime_lte: Int
  distractingTime_gt: Int
  distractingTime_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [RescueTimeDataWhereInput!]
  OR: [RescueTimeDataWhereInput!]
  NOT: [RescueTimeDataWhereInput!]
}

input RescueTimeDataWhereUniqueInput {
  id: ID
}

type Subscription {
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  rescueTimeData(where: RescueTimeDataSubscriptionWhereInput): RescueTimeDataSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  password: String!
  accessToken: String
  rescueTimeData: RescueTimeData
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  avatarUrl: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String!
  accessToken: String
  rescueTimeData: RescueTimeDataCreateOneInput
  groups: GroupCreateManyWithoutMembersInput
  avatarUrl: String
}

input UserCreateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGroupsInput {
  id: ID
  username: String!
  password: String!
  accessToken: String
  rescueTimeData: RescueTimeDataCreateOneInput
  avatarUrl: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  accessToken_ASC
  accessToken_DESC
  avatarUrl_ASC
  avatarUrl_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
  accessToken: String
  avatarUrl: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  accessToken: String
  accessToken_not: String
  accessToken_in: [String!]
  accessToken_not_in: [String!]
  accessToken_lt: String
  accessToken_lte: String
  accessToken_gt: String
  accessToken_gte: String
  accessToken_contains: String
  accessToken_not_contains: String
  accessToken_starts_with: String
  accessToken_not_starts_with: String
  accessToken_ends_with: String
  accessToken_not_ends_with: String
  avatarUrl: String
  avatarUrl_not: String
  avatarUrl_in: [String!]
  avatarUrl_not_in: [String!]
  avatarUrl_lt: String
  avatarUrl_lte: String
  avatarUrl_gt: String
  avatarUrl_gte: String
  avatarUrl_contains: String
  avatarUrl_not_contains: String
  avatarUrl_starts_with: String
  avatarUrl_not_starts_with: String
  avatarUrl_ends_with: String
  avatarUrl_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  username: String
  password: String
  accessToken: String
  rescueTimeData: RescueTimeDataUpdateOneInput
  groups: GroupUpdateManyWithoutMembersInput
  avatarUrl: String
}

input UserUpdateInput {
  username: String
  password: String
  accessToken: String
  rescueTimeData: RescueTimeDataUpdateOneInput
  groups: GroupUpdateManyWithoutMembersInput
  avatarUrl: String
}

input UserUpdateManyDataInput {
  username: String
  password: String
  accessToken: String
  avatarUrl: String
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  accessToken: String
  avatarUrl: String
}

input UserUpdateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutGroupsDataInput {
  username: String
  password: String
  accessToken: String
  rescueTimeData: RescueTimeDataUpdateOneInput
  avatarUrl: String
}

input UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  accessToken: String
  accessToken_not: String
  accessToken_in: [String!]
  accessToken_not_in: [String!]
  accessToken_lt: String
  accessToken_lte: String
  accessToken_gt: String
  accessToken_gte: String
  accessToken_contains: String
  accessToken_not_contains: String
  accessToken_starts_with: String
  accessToken_not_starts_with: String
  accessToken_ends_with: String
  accessToken_not_ends_with: String
  rescueTimeData: RescueTimeDataWhereInput
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  avatarUrl: String
  avatarUrl_not: String
  avatarUrl_in: [String!]
  avatarUrl_not_in: [String!]
  avatarUrl_lt: String
  avatarUrl_lte: String
  avatarUrl_gt: String
  avatarUrl_gte: String
  avatarUrl_contains: String
  avatarUrl_not_contains: String
  avatarUrl_starts_with: String
  avatarUrl_not_starts_with: String
  avatarUrl_ends_with: String
  avatarUrl_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
`
      }
    